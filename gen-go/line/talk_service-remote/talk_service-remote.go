// Code generated by Thrift Compiler (0.20.0). DO NOT EDIT.

package main

import (
	"context"
	"flag"
	"fmt"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"line"
)

var _ = line.GoUnusedProtection__

func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  Profile getProfile(TalkSyncReason syncReason)")
  fmt.Fprintln(os.Stderr, "  Message sendMessage(i32 seq, Message message)")
  fmt.Fprintln(os.Stderr, "  void unsendMessage(i32 seq, string messageId)")
  fmt.Fprintln(os.Stderr, "  void requestResendMessage(i32 reqSeq, string senderMid, string messageId)")
  fmt.Fprintln(os.Stderr, "  void respondResendMessage(i32 reqSeq, string receiverMid, string originalMessageId, Message resendMessage, ErrorCode errorCode)")
  fmt.Fprintln(os.Stderr, "  void sendChatChecked(i32 seq, string chatMid, string lastMessageId, i8 sessionId)")
  fmt.Fprintln(os.Stderr, "  Contact getContact(string id)")
  fmt.Fprintln(os.Stderr, "   getContacts( ids)")
  fmt.Fprintln(os.Stderr, "  GetContactsV2Response getContactsV2(GetContactsV2Request request, TalkSyncReason syncReason)")
  fmt.Fprintln(os.Stderr, "   findAndAddContactsByMid(i32 reqSeq, string mid, ContactType type, string reference)")
  fmt.Fprintln(os.Stderr, "   findAndAddContactsByPhone(i32 reqSeq,  phones, string reference)")
  fmt.Fprintln(os.Stderr, "   getAllContactIds()")
  fmt.Fprintln(os.Stderr, "   getBlockedContactIds()")
  fmt.Fprintln(os.Stderr, "   getBlockedRecommendationIds()")
  fmt.Fprintln(os.Stderr, "  Configurations getConfigurations(i64 revision, string regionOfUsim, string regionOfTelephone, string regionOfLocale, string carrier, TalkSyncReason syncReason)")
  fmt.Fprintln(os.Stderr, "  E2EEPublicKey getE2EEPublicKey(string mid, i32 version, i32 keyId)")
  fmt.Fprintln(os.Stderr, "   findAndAddContactsByUserid(i32 reqSeq, string searchId, string reference)")
  fmt.Fprintln(os.Stderr, "  RSAKey getRSAKeyInfo(IdentityProvider provider)")
  fmt.Fprintln(os.Stderr, "   getRecommendationIds()")
  fmt.Fprintln(os.Stderr, "  Settings getSettings()")
  fmt.Fprintln(os.Stderr, "  Settings getSettingsAttributes2()")
  fmt.Fprintln(os.Stderr, "  E2EENegotiationResult negotiateE2EEPublicKey(string mid)")
  fmt.Fprintln(os.Stderr, "  E2EEPublicKey registerE2EEPublicKey(i32 reqSeq, E2EEPublicKey publicKey)")
  fmt.Fprintln(os.Stderr, "   syncContacts(i32 reqSeq,  localContacts)")
  fmt.Fprintln(os.Stderr, "  string unregisterUserAndDevice()")
  fmt.Fprintln(os.Stderr, "  E2EEGroupSharedKey registerE2EEGroupKey()")
  fmt.Fprintln(os.Stderr, "  void removeFollower()")
  fmt.Fprintln(os.Stderr, "  void report()")
  fmt.Fprintln(os.Stderr, "  void reportProfile()")
  fmt.Fprintln(os.Stderr, "  void reportPushRecvReports()")
  fmt.Fprintln(os.Stderr, "  void reportSettings()")
  fmt.Fprintln(os.Stderr, "  void requestAccountPasswordReset()")
  fmt.Fprintln(os.Stderr, "  VerificationSessionData changeVerificationMethod()")
  fmt.Fprintln(os.Stderr, "  void resendPinCode()")
  fmt.Fprintln(os.Stderr, "  void clearRingbackTone()")
  fmt.Fprintln(os.Stderr, "  void clearRingtone()")
  fmt.Fprintln(os.Stderr, "   fetchOps(i64 localRev, i32 count, i64 globalRev, i64 individualRev)")
  fmt.Fprintln(os.Stderr, "  string decryptFollowEMid(string eMid)")
  fmt.Fprintln(os.Stderr, "  Contact findContactByUserTicket(string ticketIdWithTag)")
  fmt.Fprintln(os.Stderr, "  void updateContactSetting(i32 reqSeq, string mid, ContactSetting flag, string value)")
  fmt.Fprintln(os.Stderr, "   findContactsByPhone( phones)")
  fmt.Fprintln(os.Stderr, "  void tryFriendRequest(string midOrEMid, FriendRequestMethod method, string friendRequestParams)")
  fmt.Fprintln(os.Stderr, "  void follow(FollowRequest followRequest)")
  fmt.Fprintln(os.Stderr, "  void unfollow(UnfollowRequest unfollowRequest)")
  fmt.Fprintln(os.Stderr, "  Ticket generateUserTicket(i64 expirationTime, i32 maxUseCount)")
  fmt.Fprintln(os.Stderr, "  GetChatsResponse getChats(GetChatsRequest request)")
  fmt.Fprintln(os.Stderr, "  void updateNotificationToken(NotificationType type, string token)")
  fmt.Fprintln(os.Stderr, "  ContactRegistration getContactRegistration(string id, ContactType type)")
  fmt.Fprintln(os.Stderr, "  E2EEGroupSharedKey getE2EEGroupSharedKey(i32 keyVersion, string chatMid, i32 groupKeyId)")
  fmt.Fprintln(os.Stderr, "  string verifyQrcode(string verifier, string pinCode)")
  fmt.Fprintln(os.Stderr, "  bool wakeUpLongPolling(i64 clientRevision)")
  fmt.Fprintln(os.Stderr, "  GetFollowersResponse getFollowers(GetFollowersRequest getFollowersRequest)")
  fmt.Fprintln(os.Stderr, "  GetFollowingsResponse getFollowings(GetFollowingsRequest getFollowingsRequest)")
  fmt.Fprintln(os.Stderr, "  E2EEGroupSharedKey getLastE2EEGroupSharedKey(i32 keyVersion, string chatMid)")
  fmt.Fprintln(os.Stderr, "   getLastE2EEPublicKeys(string chatMid)")
  fmt.Fprintln(os.Stderr, "  i64 getLastOpRevision()")
  fmt.Fprintln(os.Stderr, "   getRoomsV2( roomIds)")
  fmt.Fprintln(os.Stderr, "  bool isUseridAvailable(string userid)")
  fmt.Fprintln(os.Stderr, "  string acquireEncryptedAccessToken(FeatureType featureType)")
  fmt.Fprintln(os.Stderr, "  RejectChatInvitationResponse rejectChatInvitation(RejectChatInvitationRequest request)")
  fmt.Fprintln(os.Stderr, "  GetAllChatMidsResponse getAllChatMids(GetAllChatMidsRequest request, i32 syncReason)")
  fmt.Fprintln(os.Stderr, "  DeleteSelfFromChatResponse deleteSelfFromChat(DeleteSelfFromChatRequest request)")
  fmt.Fprintln(os.Stderr, "  FindChatByTicketResponse findChatByTicket(FindChatByTicketRequest request)")
  fmt.Fprintln(os.Stderr, "  InviteIntoChatResponse inviteIntoChat(InviteIntoChatRequest request)")
  fmt.Fprintln(os.Stderr, "  DeleteOtherFromChatResponse deleteOtherFromChat(DeleteOtherFromChatRequest request)")
  fmt.Fprintln(os.Stderr, "  CreateChatResponse createChat(CreateChatRequest request)")
  fmt.Fprintln(os.Stderr, "  ReissueChatTicketResponse reissueChatTicket(ReissueChatTicketRequest request)")
  fmt.Fprintln(os.Stderr, "  CancelChatInvitationResponse cancelChatInvitation(CancelChatInvitationRequest request)")
  fmt.Fprintln(os.Stderr, "  UpdateChatResponse updateChat(UpdateChatRequest request)")
  fmt.Fprintln(os.Stderr, "  AcceptChatInvitationResponse acceptChatInvitation(AcceptChatInvitationRequest request)")
  fmt.Fprintln(os.Stderr, "  AcceptChatInvitationByTicketResponse acceptChatInvitationByTicket(AcceptChatInvitationByTicketRequest request)")
  fmt.Fprintln(os.Stderr, "   getMessageReadRange( chatIds, TalkSyncReason syncReason)")
  fmt.Fprintln(os.Stderr, "  void react(ReactRequest reactRequest)")
  fmt.Fprintln(os.Stderr, "   getPreviousMessagesV2WithRequest(GetPreviousMessagesV2Request request, TalkSyncReason syncReason)")
  fmt.Fprintln(os.Stderr, "   getPreviousMessagesV2()")
  fmt.Fprintln(os.Stderr, "   getRecentMessagesV2(string messageBoxId, i32 messagesCount)")
  fmt.Fprintln(os.Stderr, "  void cancelReaction()")
  fmt.Fprintln(os.Stderr, "  DetermineMediaMessageFlowResponse determineMediaMessageFlow()")
  fmt.Fprintln(os.Stderr, "   getChatRoomAnnouncementsBulk()")
  fmt.Fprintln(os.Stderr, "   getChatRoomAnnouncements()")
  fmt.Fprintln(os.Stderr, "  void removeChatRoomAnnouncement()")
  fmt.Fprintln(os.Stderr, "  ChatRoomAnnouncement createChatRoomAnnouncement()")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

type httpHeaders map[string]string

func (h httpHeaders) String() string {
  var m map[string]string = h
  return fmt.Sprintf("%s", m)
}

func (h httpHeaders) Set(value string) error {
  parts := strings.Split(value, ": ")
  if len(parts) != 2 {
    return fmt.Errorf("header should be of format 'Key: Value'")
  }
  h[parts[0]] = parts[1]
  return nil
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  headers := make(httpHeaders)
  var parsedUrl *url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Var(headers, "H", "Headers to set on the http(s) request (e.g. -H \"Key: Value\")")
  flag.Parse()
  
  if len(urlString) > 0 {
    var err error
    parsedUrl, err = url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http" || parsedUrl.Scheme == "https"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  var cfg *thrift.TConfiguration = nil
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
    if len(headers) > 0 {
      httptrans := trans.(*thrift.THttpClient)
      for key, value := range headers {
        httptrans.SetHeader(key, value)
      }
    }
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans = thrift.NewTSocketConf(net.JoinHostPort(host, portStr), cfg)
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransportConf(trans, cfg)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactoryConf(cfg)
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactoryConf(cfg)
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryConf(cfg)
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  iprot := protocolFactory.GetProtocol(trans)
  oprot := protocolFactory.GetProtocol(trans)
  client := line.NewTalkServiceClient(thrift.NewTStandardClient(iprot, oprot))
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "getProfile":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetProfile requires 1 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := line.TalkSyncReason(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetProfile(context.Background(), value0))
    fmt.Print("\n")
    break
  case "sendMessage":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SendMessage requires 2 args")
      flag.Usage()
    }
    tmp0, err685 := (strconv.Atoi(flag.Arg(1)))
    if err685 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg686 := flag.Arg(2)
    mbTrans687 := thrift.NewTMemoryBufferLen(len(arg686))
    defer mbTrans687.Close()
    _, err688 := mbTrans687.WriteString(arg686)
    if err688 != nil {
      Usage()
      return
    }
    factory689 := thrift.NewTJSONProtocolFactory()
    jsProt690 := factory689.GetProtocol(mbTrans687)
    argvalue1 := line.NewMessage()
    err691 := argvalue1.Read(context.Background(), jsProt690)
    if err691 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SendMessage(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "unsendMessage":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UnsendMessage requires 2 args")
      flag.Usage()
    }
    tmp0, err692 := (strconv.Atoi(flag.Arg(1)))
    if err692 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.UnsendMessage(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "requestResendMessage":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "RequestResendMessage requires 3 args")
      flag.Usage()
    }
    tmp0, err694 := (strconv.Atoi(flag.Arg(1)))
    if err694 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.RequestResendMessage(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "respondResendMessage":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "RespondResendMessage requires 5 args")
      flag.Usage()
    }
    tmp0, err697 := (strconv.Atoi(flag.Arg(1)))
    if err697 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    arg700 := flag.Arg(4)
    mbTrans701 := thrift.NewTMemoryBufferLen(len(arg700))
    defer mbTrans701.Close()
    _, err702 := mbTrans701.WriteString(arg700)
    if err702 != nil {
      Usage()
      return
    }
    factory703 := thrift.NewTJSONProtocolFactory()
    jsProt704 := factory703.GetProtocol(mbTrans701)
    argvalue3 := line.NewMessage()
    err705 := argvalue3.Read(context.Background(), jsProt704)
    if err705 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    tmp4, err := (strconv.Atoi(flag.Arg(5)))
    if err != nil {
      Usage()
     return
    }
    argvalue4 := line.ErrorCode(tmp4)
    value4 := argvalue4
    fmt.Print(client.RespondResendMessage(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "sendChatChecked":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "SendChatChecked requires 4 args")
      flag.Usage()
    }
    tmp0, err706 := (strconv.Atoi(flag.Arg(1)))
    if err706 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    tmp3, err709 := (strconv.Atoi(flag.Arg(4)))
    if err709 != nil {
      Usage()
      return
    }
    argvalue3 := int8(tmp3)
    value3 := argvalue3
    fmt.Print(client.SendChatChecked(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "getContact":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetContact requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetContact(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getContacts":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetContacts requires 1 args")
      flag.Usage()
    }
    arg711 := flag.Arg(1)
    mbTrans712 := thrift.NewTMemoryBufferLen(len(arg711))
    defer mbTrans712.Close()
    _, err713 := mbTrans712.WriteString(arg711)
    if err713 != nil { 
      Usage()
      return
    }
    factory714 := thrift.NewTJSONProtocolFactory()
    jsProt715 := factory714.GetProtocol(mbTrans712)
    containerStruct0 := line.NewTalkServiceGetContactsArgs()
    err716 := containerStruct0.ReadField1(context.Background(), jsProt715)
    if err716 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.Ids
    value0 := argvalue0
    fmt.Print(client.GetContacts(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getContactsV2":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetContactsV2 requires 2 args")
      flag.Usage()
    }
    arg717 := flag.Arg(1)
    mbTrans718 := thrift.NewTMemoryBufferLen(len(arg717))
    defer mbTrans718.Close()
    _, err719 := mbTrans718.WriteString(arg717)
    if err719 != nil {
      Usage()
      return
    }
    factory720 := thrift.NewTJSONProtocolFactory()
    jsProt721 := factory720.GetProtocol(mbTrans718)
    argvalue0 := line.NewGetContactsV2Request()
    err722 := argvalue0.Read(context.Background(), jsProt721)
    if err722 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := line.TalkSyncReason(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetContactsV2(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "findAndAddContactsByMid":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "FindAndAddContactsByMid requires 4 args")
      flag.Usage()
    }
    tmp0, err723 := (strconv.Atoi(flag.Arg(1)))
    if err723 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err := (strconv.Atoi(flag.Arg(3)))
    if err != nil {
      Usage()
     return
    }
    argvalue2 := line.ContactType(tmp2)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    fmt.Print(client.FindAndAddContactsByMid(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "findAndAddContactsByPhone":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "FindAndAddContactsByPhone requires 3 args")
      flag.Usage()
    }
    tmp0, err726 := (strconv.Atoi(flag.Arg(1)))
    if err726 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg727 := flag.Arg(2)
    mbTrans728 := thrift.NewTMemoryBufferLen(len(arg727))
    defer mbTrans728.Close()
    _, err729 := mbTrans728.WriteString(arg727)
    if err729 != nil { 
      Usage()
      return
    }
    factory730 := thrift.NewTJSONProtocolFactory()
    jsProt731 := factory730.GetProtocol(mbTrans728)
    containerStruct1 := line.NewTalkServiceFindAndAddContactsByPhoneArgs()
    err732 := containerStruct1.ReadField2(context.Background(), jsProt731)
    if err732 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.Phones
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.FindAndAddContactsByPhone(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getAllContactIds":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetAllContactIds requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetAllContactIds(context.Background()))
    fmt.Print("\n")
    break
  case "getBlockedContactIds":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetBlockedContactIds requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetBlockedContactIds(context.Background()))
    fmt.Print("\n")
    break
  case "getBlockedRecommendationIds":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetBlockedRecommendationIds requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetBlockedRecommendationIds(context.Background()))
    fmt.Print("\n")
    break
  case "getConfigurations":
    if flag.NArg() - 1 != 6 {
      fmt.Fprintln(os.Stderr, "GetConfigurations requires 6 args")
      flag.Usage()
    }
    argvalue0, err734 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err734 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    argvalue4 := flag.Arg(5)
    value4 := argvalue4
    tmp5, err := (strconv.Atoi(flag.Arg(6)))
    if err != nil {
      Usage()
     return
    }
    argvalue5 := line.TalkSyncReason(tmp5)
    value5 := argvalue5
    fmt.Print(client.GetConfigurations(context.Background(), value0, value1, value2, value3, value4, value5))
    fmt.Print("\n")
    break
  case "getE2EEPublicKey":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetE2EEPublicKey requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err740 := (strconv.Atoi(flag.Arg(2)))
    if err740 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    tmp2, err741 := (strconv.Atoi(flag.Arg(3)))
    if err741 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetE2EEPublicKey(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "findAndAddContactsByUserid":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "FindAndAddContactsByUserid requires 3 args")
      flag.Usage()
    }
    tmp0, err742 := (strconv.Atoi(flag.Arg(1)))
    if err742 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.FindAndAddContactsByUserid(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getRSAKeyInfo":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetRSAKeyInfo requires 1 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := line.IdentityProvider(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetRSAKeyInfo(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getRecommendationIds":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetRecommendationIds requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetRecommendationIds(context.Background()))
    fmt.Print("\n")
    break
  case "getSettings":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetSettings requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetSettings(context.Background()))
    fmt.Print("\n")
    break
  case "getSettingsAttributes2":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetSettingsAttributes2 requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetSettingsAttributes2(context.Background()))
    fmt.Print("\n")
    break
  case "negotiateE2EEPublicKey":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "NegotiateE2EEPublicKey requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.NegotiateE2EEPublicKey(context.Background(), value0))
    fmt.Print("\n")
    break
  case "registerE2EEPublicKey":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RegisterE2EEPublicKey requires 2 args")
      flag.Usage()
    }
    tmp0, err746 := (strconv.Atoi(flag.Arg(1)))
    if err746 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg747 := flag.Arg(2)
    mbTrans748 := thrift.NewTMemoryBufferLen(len(arg747))
    defer mbTrans748.Close()
    _, err749 := mbTrans748.WriteString(arg747)
    if err749 != nil {
      Usage()
      return
    }
    factory750 := thrift.NewTJSONProtocolFactory()
    jsProt751 := factory750.GetProtocol(mbTrans748)
    argvalue1 := line.NewE2EEPublicKey()
    err752 := argvalue1.Read(context.Background(), jsProt751)
    if err752 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.RegisterE2EEPublicKey(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "syncContacts":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SyncContacts requires 2 args")
      flag.Usage()
    }
    tmp0, err753 := (strconv.Atoi(flag.Arg(1)))
    if err753 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg754 := flag.Arg(2)
    mbTrans755 := thrift.NewTMemoryBufferLen(len(arg754))
    defer mbTrans755.Close()
    _, err756 := mbTrans755.WriteString(arg754)
    if err756 != nil { 
      Usage()
      return
    }
    factory757 := thrift.NewTJSONProtocolFactory()
    jsProt758 := factory757.GetProtocol(mbTrans755)
    containerStruct1 := line.NewTalkServiceSyncContactsArgs()
    err759 := containerStruct1.ReadField2(context.Background(), jsProt758)
    if err759 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.LocalContacts
    value1 := argvalue1
    fmt.Print(client.SyncContacts(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "unregisterUserAndDevice":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "UnregisterUserAndDevice requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.UnregisterUserAndDevice(context.Background()))
    fmt.Print("\n")
    break
  case "registerE2EEGroupKey":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "RegisterE2EEGroupKey requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.RegisterE2EEGroupKey(context.Background()))
    fmt.Print("\n")
    break
  case "removeFollower":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "RemoveFollower requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.RemoveFollower(context.Background()))
    fmt.Print("\n")
    break
  case "report":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "Report requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.Report(context.Background()))
    fmt.Print("\n")
    break
  case "reportProfile":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "ReportProfile requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.ReportProfile(context.Background()))
    fmt.Print("\n")
    break
  case "reportPushRecvReports":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "ReportPushRecvReports requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.ReportPushRecvReports(context.Background()))
    fmt.Print("\n")
    break
  case "reportSettings":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "ReportSettings requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.ReportSettings(context.Background()))
    fmt.Print("\n")
    break
  case "requestAccountPasswordReset":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "RequestAccountPasswordReset requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.RequestAccountPasswordReset(context.Background()))
    fmt.Print("\n")
    break
  case "changeVerificationMethod":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "ChangeVerificationMethod requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.ChangeVerificationMethod(context.Background()))
    fmt.Print("\n")
    break
  case "resendPinCode":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "ResendPinCode requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.ResendPinCode(context.Background()))
    fmt.Print("\n")
    break
  case "clearRingbackTone":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "ClearRingbackTone requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.ClearRingbackTone(context.Background()))
    fmt.Print("\n")
    break
  case "clearRingtone":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "ClearRingtone requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.ClearRingtone(context.Background()))
    fmt.Print("\n")
    break
  case "fetchOps":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "FetchOps requires 4 args")
      flag.Usage()
    }
    argvalue0, err760 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err760 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err761 := (strconv.Atoi(flag.Arg(2)))
    if err761 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    argvalue2, err762 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err762 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3, err763 := (strconv.ParseInt(flag.Arg(4), 10, 64))
    if err763 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.FetchOps(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "decryptFollowEMid":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DecryptFollowEMid requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.DecryptFollowEMid(context.Background(), value0))
    fmt.Print("\n")
    break
  case "findContactByUserTicket":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "FindContactByUserTicket requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.FindContactByUserTicket(context.Background(), value0))
    fmt.Print("\n")
    break
  case "updateContactSetting":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "UpdateContactSetting requires 4 args")
      flag.Usage()
    }
    tmp0, err766 := (strconv.Atoi(flag.Arg(1)))
    if err766 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err := (strconv.Atoi(flag.Arg(3)))
    if err != nil {
      Usage()
     return
    }
    argvalue2 := line.ContactSetting(tmp2)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    fmt.Print(client.UpdateContactSetting(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "findContactsByPhone":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "FindContactsByPhone requires 1 args")
      flag.Usage()
    }
    arg769 := flag.Arg(1)
    mbTrans770 := thrift.NewTMemoryBufferLen(len(arg769))
    defer mbTrans770.Close()
    _, err771 := mbTrans770.WriteString(arg769)
    if err771 != nil { 
      Usage()
      return
    }
    factory772 := thrift.NewTJSONProtocolFactory()
    jsProt773 := factory772.GetProtocol(mbTrans770)
    containerStruct0 := line.NewTalkServiceFindContactsByPhoneArgs()
    err774 := containerStruct0.ReadField1(context.Background(), jsProt773)
    if err774 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.Phones
    value0 := argvalue0
    fmt.Print(client.FindContactsByPhone(context.Background(), value0))
    fmt.Print("\n")
    break
  case "tryFriendRequest":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "TryFriendRequest requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := line.FriendRequestMethod(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.TryFriendRequest(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "follow":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Follow requires 1 args")
      flag.Usage()
    }
    arg777 := flag.Arg(1)
    mbTrans778 := thrift.NewTMemoryBufferLen(len(arg777))
    defer mbTrans778.Close()
    _, err779 := mbTrans778.WriteString(arg777)
    if err779 != nil {
      Usage()
      return
    }
    factory780 := thrift.NewTJSONProtocolFactory()
    jsProt781 := factory780.GetProtocol(mbTrans778)
    argvalue0 := line.NewFollowRequest()
    err782 := argvalue0.Read(context.Background(), jsProt781)
    if err782 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Follow(context.Background(), value0))
    fmt.Print("\n")
    break
  case "unfollow":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Unfollow requires 1 args")
      flag.Usage()
    }
    arg783 := flag.Arg(1)
    mbTrans784 := thrift.NewTMemoryBufferLen(len(arg783))
    defer mbTrans784.Close()
    _, err785 := mbTrans784.WriteString(arg783)
    if err785 != nil {
      Usage()
      return
    }
    factory786 := thrift.NewTJSONProtocolFactory()
    jsProt787 := factory786.GetProtocol(mbTrans784)
    argvalue0 := line.NewUnfollowRequest()
    err788 := argvalue0.Read(context.Background(), jsProt787)
    if err788 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Unfollow(context.Background(), value0))
    fmt.Print("\n")
    break
  case "generateUserTicket":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GenerateUserTicket requires 2 args")
      flag.Usage()
    }
    argvalue0, err789 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err789 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err790 := (strconv.Atoi(flag.Arg(2)))
    if err790 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.GenerateUserTicket(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getChats":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetChats requires 1 args")
      flag.Usage()
    }
    arg791 := flag.Arg(1)
    mbTrans792 := thrift.NewTMemoryBufferLen(len(arg791))
    defer mbTrans792.Close()
    _, err793 := mbTrans792.WriteString(arg791)
    if err793 != nil {
      Usage()
      return
    }
    factory794 := thrift.NewTJSONProtocolFactory()
    jsProt795 := factory794.GetProtocol(mbTrans792)
    argvalue0 := line.NewGetChatsRequest()
    err796 := argvalue0.Read(context.Background(), jsProt795)
    if err796 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetChats(context.Background(), value0))
    fmt.Print("\n")
    break
  case "updateNotificationToken":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdateNotificationToken requires 2 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := line.NotificationType(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.UpdateNotificationToken(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getContactRegistration":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetContactRegistration requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := line.ContactType(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetContactRegistration(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getE2EEGroupSharedKey":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetE2EEGroupSharedKey requires 3 args")
      flag.Usage()
    }
    tmp0, err799 := (strconv.Atoi(flag.Arg(1)))
    if err799 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err801 := (strconv.Atoi(flag.Arg(3)))
    if err801 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetE2EEGroupSharedKey(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "verifyQrcode":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "VerifyQrcode requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.VerifyQrcode(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "wakeUpLongPolling":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "WakeUpLongPolling requires 1 args")
      flag.Usage()
    }
    argvalue0, err804 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err804 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.WakeUpLongPolling(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getFollowers":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetFollowers requires 1 args")
      flag.Usage()
    }
    arg805 := flag.Arg(1)
    mbTrans806 := thrift.NewTMemoryBufferLen(len(arg805))
    defer mbTrans806.Close()
    _, err807 := mbTrans806.WriteString(arg805)
    if err807 != nil {
      Usage()
      return
    }
    factory808 := thrift.NewTJSONProtocolFactory()
    jsProt809 := factory808.GetProtocol(mbTrans806)
    argvalue0 := line.NewGetFollowersRequest()
    err810 := argvalue0.Read(context.Background(), jsProt809)
    if err810 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetFollowers(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getFollowings":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetFollowings requires 1 args")
      flag.Usage()
    }
    arg811 := flag.Arg(1)
    mbTrans812 := thrift.NewTMemoryBufferLen(len(arg811))
    defer mbTrans812.Close()
    _, err813 := mbTrans812.WriteString(arg811)
    if err813 != nil {
      Usage()
      return
    }
    factory814 := thrift.NewTJSONProtocolFactory()
    jsProt815 := factory814.GetProtocol(mbTrans812)
    argvalue0 := line.NewGetFollowingsRequest()
    err816 := argvalue0.Read(context.Background(), jsProt815)
    if err816 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetFollowings(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getLastE2EEGroupSharedKey":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetLastE2EEGroupSharedKey requires 2 args")
      flag.Usage()
    }
    tmp0, err817 := (strconv.Atoi(flag.Arg(1)))
    if err817 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetLastE2EEGroupSharedKey(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getLastE2EEPublicKeys":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetLastE2EEPublicKeys requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetLastE2EEPublicKeys(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getLastOpRevision":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetLastOpRevision requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetLastOpRevision(context.Background()))
    fmt.Print("\n")
    break
  case "getRoomsV2":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetRoomsV2 requires 1 args")
      flag.Usage()
    }
    arg820 := flag.Arg(1)
    mbTrans821 := thrift.NewTMemoryBufferLen(len(arg820))
    defer mbTrans821.Close()
    _, err822 := mbTrans821.WriteString(arg820)
    if err822 != nil { 
      Usage()
      return
    }
    factory823 := thrift.NewTJSONProtocolFactory()
    jsProt824 := factory823.GetProtocol(mbTrans821)
    containerStruct0 := line.NewTalkServiceGetRoomsV2Args()
    err825 := containerStruct0.ReadField1(context.Background(), jsProt824)
    if err825 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.RoomIds
    value0 := argvalue0
    fmt.Print(client.GetRoomsV2(context.Background(), value0))
    fmt.Print("\n")
    break
  case "isUseridAvailable":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "IsUseridAvailable requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.IsUseridAvailable(context.Background(), value0))
    fmt.Print("\n")
    break
  case "acquireEncryptedAccessToken":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AcquireEncryptedAccessToken requires 1 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := line.FeatureType(tmp0)
    value0 := argvalue0
    fmt.Print(client.AcquireEncryptedAccessToken(context.Background(), value0))
    fmt.Print("\n")
    break
  case "rejectChatInvitation":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RejectChatInvitation requires 1 args")
      flag.Usage()
    }
    arg827 := flag.Arg(1)
    mbTrans828 := thrift.NewTMemoryBufferLen(len(arg827))
    defer mbTrans828.Close()
    _, err829 := mbTrans828.WriteString(arg827)
    if err829 != nil {
      Usage()
      return
    }
    factory830 := thrift.NewTJSONProtocolFactory()
    jsProt831 := factory830.GetProtocol(mbTrans828)
    argvalue0 := line.NewRejectChatInvitationRequest()
    err832 := argvalue0.Read(context.Background(), jsProt831)
    if err832 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RejectChatInvitation(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getAllChatMids":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetAllChatMids requires 2 args")
      flag.Usage()
    }
    arg833 := flag.Arg(1)
    mbTrans834 := thrift.NewTMemoryBufferLen(len(arg833))
    defer mbTrans834.Close()
    _, err835 := mbTrans834.WriteString(arg833)
    if err835 != nil {
      Usage()
      return
    }
    factory836 := thrift.NewTJSONProtocolFactory()
    jsProt837 := factory836.GetProtocol(mbTrans834)
    argvalue0 := line.NewGetAllChatMidsRequest()
    err838 := argvalue0.Read(context.Background(), jsProt837)
    if err838 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err839 := (strconv.Atoi(flag.Arg(2)))
    if err839 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetAllChatMids(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "deleteSelfFromChat":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DeleteSelfFromChat requires 1 args")
      flag.Usage()
    }
    arg840 := flag.Arg(1)
    mbTrans841 := thrift.NewTMemoryBufferLen(len(arg840))
    defer mbTrans841.Close()
    _, err842 := mbTrans841.WriteString(arg840)
    if err842 != nil {
      Usage()
      return
    }
    factory843 := thrift.NewTJSONProtocolFactory()
    jsProt844 := factory843.GetProtocol(mbTrans841)
    argvalue0 := line.NewDeleteSelfFromChatRequest()
    err845 := argvalue0.Read(context.Background(), jsProt844)
    if err845 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DeleteSelfFromChat(context.Background(), value0))
    fmt.Print("\n")
    break
  case "findChatByTicket":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "FindChatByTicket requires 1 args")
      flag.Usage()
    }
    arg846 := flag.Arg(1)
    mbTrans847 := thrift.NewTMemoryBufferLen(len(arg846))
    defer mbTrans847.Close()
    _, err848 := mbTrans847.WriteString(arg846)
    if err848 != nil {
      Usage()
      return
    }
    factory849 := thrift.NewTJSONProtocolFactory()
    jsProt850 := factory849.GetProtocol(mbTrans847)
    argvalue0 := line.NewFindChatByTicketRequest()
    err851 := argvalue0.Read(context.Background(), jsProt850)
    if err851 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.FindChatByTicket(context.Background(), value0))
    fmt.Print("\n")
    break
  case "inviteIntoChat":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "InviteIntoChat requires 1 args")
      flag.Usage()
    }
    arg852 := flag.Arg(1)
    mbTrans853 := thrift.NewTMemoryBufferLen(len(arg852))
    defer mbTrans853.Close()
    _, err854 := mbTrans853.WriteString(arg852)
    if err854 != nil {
      Usage()
      return
    }
    factory855 := thrift.NewTJSONProtocolFactory()
    jsProt856 := factory855.GetProtocol(mbTrans853)
    argvalue0 := line.NewInviteIntoChatRequest()
    err857 := argvalue0.Read(context.Background(), jsProt856)
    if err857 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.InviteIntoChat(context.Background(), value0))
    fmt.Print("\n")
    break
  case "deleteOtherFromChat":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DeleteOtherFromChat requires 1 args")
      flag.Usage()
    }
    arg858 := flag.Arg(1)
    mbTrans859 := thrift.NewTMemoryBufferLen(len(arg858))
    defer mbTrans859.Close()
    _, err860 := mbTrans859.WriteString(arg858)
    if err860 != nil {
      Usage()
      return
    }
    factory861 := thrift.NewTJSONProtocolFactory()
    jsProt862 := factory861.GetProtocol(mbTrans859)
    argvalue0 := line.NewDeleteOtherFromChatRequest()
    err863 := argvalue0.Read(context.Background(), jsProt862)
    if err863 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DeleteOtherFromChat(context.Background(), value0))
    fmt.Print("\n")
    break
  case "createChat":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateChat requires 1 args")
      flag.Usage()
    }
    arg864 := flag.Arg(1)
    mbTrans865 := thrift.NewTMemoryBufferLen(len(arg864))
    defer mbTrans865.Close()
    _, err866 := mbTrans865.WriteString(arg864)
    if err866 != nil {
      Usage()
      return
    }
    factory867 := thrift.NewTJSONProtocolFactory()
    jsProt868 := factory867.GetProtocol(mbTrans865)
    argvalue0 := line.NewCreateChatRequest()
    err869 := argvalue0.Read(context.Background(), jsProt868)
    if err869 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateChat(context.Background(), value0))
    fmt.Print("\n")
    break
  case "reissueChatTicket":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ReissueChatTicket requires 1 args")
      flag.Usage()
    }
    arg870 := flag.Arg(1)
    mbTrans871 := thrift.NewTMemoryBufferLen(len(arg870))
    defer mbTrans871.Close()
    _, err872 := mbTrans871.WriteString(arg870)
    if err872 != nil {
      Usage()
      return
    }
    factory873 := thrift.NewTJSONProtocolFactory()
    jsProt874 := factory873.GetProtocol(mbTrans871)
    argvalue0 := line.NewReissueChatTicketRequest()
    err875 := argvalue0.Read(context.Background(), jsProt874)
    if err875 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ReissueChatTicket(context.Background(), value0))
    fmt.Print("\n")
    break
  case "cancelChatInvitation":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CancelChatInvitation requires 1 args")
      flag.Usage()
    }
    arg876 := flag.Arg(1)
    mbTrans877 := thrift.NewTMemoryBufferLen(len(arg876))
    defer mbTrans877.Close()
    _, err878 := mbTrans877.WriteString(arg876)
    if err878 != nil {
      Usage()
      return
    }
    factory879 := thrift.NewTJSONProtocolFactory()
    jsProt880 := factory879.GetProtocol(mbTrans877)
    argvalue0 := line.NewCancelChatInvitationRequest()
    err881 := argvalue0.Read(context.Background(), jsProt880)
    if err881 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CancelChatInvitation(context.Background(), value0))
    fmt.Print("\n")
    break
  case "updateChat":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "UpdateChat requires 1 args")
      flag.Usage()
    }
    arg882 := flag.Arg(1)
    mbTrans883 := thrift.NewTMemoryBufferLen(len(arg882))
    defer mbTrans883.Close()
    _, err884 := mbTrans883.WriteString(arg882)
    if err884 != nil {
      Usage()
      return
    }
    factory885 := thrift.NewTJSONProtocolFactory()
    jsProt886 := factory885.GetProtocol(mbTrans883)
    argvalue0 := line.NewUpdateChatRequest()
    err887 := argvalue0.Read(context.Background(), jsProt886)
    if err887 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.UpdateChat(context.Background(), value0))
    fmt.Print("\n")
    break
  case "acceptChatInvitation":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AcceptChatInvitation requires 1 args")
      flag.Usage()
    }
    arg888 := flag.Arg(1)
    mbTrans889 := thrift.NewTMemoryBufferLen(len(arg888))
    defer mbTrans889.Close()
    _, err890 := mbTrans889.WriteString(arg888)
    if err890 != nil {
      Usage()
      return
    }
    factory891 := thrift.NewTJSONProtocolFactory()
    jsProt892 := factory891.GetProtocol(mbTrans889)
    argvalue0 := line.NewAcceptChatInvitationRequest()
    err893 := argvalue0.Read(context.Background(), jsProt892)
    if err893 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AcceptChatInvitation(context.Background(), value0))
    fmt.Print("\n")
    break
  case "acceptChatInvitationByTicket":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AcceptChatInvitationByTicket requires 1 args")
      flag.Usage()
    }
    arg894 := flag.Arg(1)
    mbTrans895 := thrift.NewTMemoryBufferLen(len(arg894))
    defer mbTrans895.Close()
    _, err896 := mbTrans895.WriteString(arg894)
    if err896 != nil {
      Usage()
      return
    }
    factory897 := thrift.NewTJSONProtocolFactory()
    jsProt898 := factory897.GetProtocol(mbTrans895)
    argvalue0 := line.NewAcceptChatInvitationByTicketRequest()
    err899 := argvalue0.Read(context.Background(), jsProt898)
    if err899 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AcceptChatInvitationByTicket(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getMessageReadRange":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetMessageReadRange requires 2 args")
      flag.Usage()
    }
    arg900 := flag.Arg(1)
    mbTrans901 := thrift.NewTMemoryBufferLen(len(arg900))
    defer mbTrans901.Close()
    _, err902 := mbTrans901.WriteString(arg900)
    if err902 != nil { 
      Usage()
      return
    }
    factory903 := thrift.NewTJSONProtocolFactory()
    jsProt904 := factory903.GetProtocol(mbTrans901)
    containerStruct0 := line.NewTalkServiceGetMessageReadRangeArgs()
    err905 := containerStruct0.ReadField1(context.Background(), jsProt904)
    if err905 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.ChatIds
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := line.TalkSyncReason(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetMessageReadRange(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "react":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "React requires 1 args")
      flag.Usage()
    }
    arg906 := flag.Arg(1)
    mbTrans907 := thrift.NewTMemoryBufferLen(len(arg906))
    defer mbTrans907.Close()
    _, err908 := mbTrans907.WriteString(arg906)
    if err908 != nil {
      Usage()
      return
    }
    factory909 := thrift.NewTJSONProtocolFactory()
    jsProt910 := factory909.GetProtocol(mbTrans907)
    argvalue0 := line.NewReactRequest()
    err911 := argvalue0.Read(context.Background(), jsProt910)
    if err911 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.React(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getPreviousMessagesV2WithRequest":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetPreviousMessagesV2WithRequest requires 2 args")
      flag.Usage()
    }
    arg912 := flag.Arg(1)
    mbTrans913 := thrift.NewTMemoryBufferLen(len(arg912))
    defer mbTrans913.Close()
    _, err914 := mbTrans913.WriteString(arg912)
    if err914 != nil {
      Usage()
      return
    }
    factory915 := thrift.NewTJSONProtocolFactory()
    jsProt916 := factory915.GetProtocol(mbTrans913)
    argvalue0 := line.NewGetPreviousMessagesV2Request()
    err917 := argvalue0.Read(context.Background(), jsProt916)
    if err917 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := line.TalkSyncReason(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetPreviousMessagesV2WithRequest(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getPreviousMessagesV2":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetPreviousMessagesV2 requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetPreviousMessagesV2(context.Background()))
    fmt.Print("\n")
    break
  case "getRecentMessagesV2":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetRecentMessagesV2 requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err919 := (strconv.Atoi(flag.Arg(2)))
    if err919 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetRecentMessagesV2(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "cancelReaction":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "CancelReaction requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.CancelReaction(context.Background()))
    fmt.Print("\n")
    break
  case "determineMediaMessageFlow":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "DetermineMediaMessageFlow requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.DetermineMediaMessageFlow(context.Background()))
    fmt.Print("\n")
    break
  case "getChatRoomAnnouncementsBulk":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetChatRoomAnnouncementsBulk requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetChatRoomAnnouncementsBulk(context.Background()))
    fmt.Print("\n")
    break
  case "getChatRoomAnnouncements":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetChatRoomAnnouncements requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetChatRoomAnnouncements(context.Background()))
    fmt.Print("\n")
    break
  case "removeChatRoomAnnouncement":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "RemoveChatRoomAnnouncement requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.RemoveChatRoomAnnouncement(context.Background()))
    fmt.Print("\n")
    break
  case "createChatRoomAnnouncement":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "CreateChatRoomAnnouncement requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.CreateChatRoomAnnouncement(context.Background()))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
